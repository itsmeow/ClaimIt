buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven-publish'
version = "${project.mc_version}-${project.mod_version}"
group = "${project.maven_group}"
archivesBaseName = "${project.mod_id}"
def at_name = project.hasProperty('at_name') ? "${project.at_name}" : ""
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
minecraft {
    version = "${project.mc_version}-${project.forge_version}"
    runDir = "run"
    mappings = project.mcp_mappings
    replace "@VERSION@", "${project.mc_version}-${project.mod_version}"
    replace "@APIVERSION@", "${project.mc_version}-${project.api_version}"
    replace "after-required:claimitapi", "after-required:claimitapi@[${project.mc_version}-${project.api_version}]"
    makeObfSourceJar = false
}
// API build task
task apiJar(type: Jar) {
    onlyIf {
        project.hasProperty("api_package")
    }
    version = "${project.mc_version}-${project.api_version}"
    from sourceSets.main.output
    include String.valueOf(findProperty("api_package")).replace(".", "/") + "/**"
    from "LICENSE"
    manifest.mainAttributes(
            "Built-On-Java": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Implementation-Title": project.name + '-api',
            "Implementation-Version": "${project.mc_version}-${project.api_version}",
            "Implementation-Vendor": "its_meow",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.mc_version}-${project.api_version}:api",
            "Built-On": "${mc_version}-${forge_version}"
    )
    baseName = "claimitapi"
    classifier ''
}

task srcJar(type: Jar) {
    from sourceSets.main.allJava

	extension = 'jar'
	classifier = 'sources'
	if (project.hasProperty('api_package')) {
        exclude String.valueOf(findProperty('api_package')).replace(".", "/") + "/**"
    }
}

task apiSrcJar(type: Jar) {
    onlyIf {
        project.hasProperty("api_package")
    }
    from sourceSets.main.allJava
    include String.valueOf(findProperty("api_package")).replace(".", "/") + "/**"

	extension = 'jar'
	classifier = 'sources'
	baseName = "claimitapi"
}

reobf {
    apiJar {}
    jar {}
}

artifacts {
    archives srcJar, apiJar, apiSrcJar
}

jar {
    from "LICENSE"
    manifest {
        mainAttributes(
            "Maven-Artifact": "${project.maven_group}:${project.archivesBaseName}:${project.version}",
            "Specification-Title": archivesBaseName,
            "Specification-Vendor": "its_meow",
            "Specification-Version": "1",
            "Implementation-Title": archivesBaseName,
            "Implementation-Version": "${project.mod_version}",
            "Implementation-Vendor": "its_meow",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Built-On-Java": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
            "Built-On": "${project.mc_version}-${project.forge_version}"
        )
    }
    if(!"".equals(at_name)) {
        manifest.mainAttributes("FMLAT": at_name)
    }
    if (project.hasProperty('api_package')) {
        exclude String.valueOf(findProperty('api_package')).replace(".", "/") + "/**"
    }
    classifier ''
}

publishing {
    publications {
        baseJar(MavenPublication) {
            groupId project.maven_group
            artifactId project.archivesBaseName
            version project.version
            from components.java
            artifact srcJar {
                classifier 'sources'
            }
            pom {
                name = project.name
                url = project.url
                packaging = 'jar'
                scm {
                    connection = "scm:git:git://github.com/" + project.github + ".git"
                    developerConnection = "scm:git:git@github.com:" + project.github + ".git"
                    url = "https://github.com/" + project.github
                }
                issueManagement {
                    system = 'github'
                    url = "https://github.com/" + project.github + ".git/issues"
                }
                organization {
                    name = 'itsmeow Mods'
                    url = 'https://itsmeow.dev/'
                }
            }
        }
        publishApiJar(MavenPublication) {
            artifact apiSrcJar {
                classifier 'sources'
            }
            artifact apiJar
            groupId project.maven_group
            artifactId "claimitapi"
            version "${project.mc_version}-${api_version}"
            pom {
                name = project.name
                url = project.url
                packaging = 'jar'
                scm {
                    connection = "scm:git:git://github.com/" + project.github + ".git"
                    developerConnection = "scm:git:git@github.com:" + project.github + ".git"
                    url = "https://github.com/" + project.github
                }
                issueManagement {
                    system = 'github'
                    url = "https://github.com/" + project.github + ".git/issues"
                }
                organization {
                    name = 'itsmeow Mods'
                    url = 'https://itsmeow.dev/'
                }
            }
        }
    }
    repositories {
        maven {
            if ((System.getenv("MAVEN_USER") != '') && (System.getenv("MAVEN_PASSWORD") != '')) {
                credentials {
                    username System.getenv("MAVEN_USER")
                    password System.getenv("MAVEN_PASSWORD")
                }
            }
            if (System.getenv("MAVEN_URL") != '') {
                url System.getenv("MAVEN_URL")
            } else {
                url "file:///${project.buildDir}/repo"
            }
        }
    }
}
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
processResources {
    doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}